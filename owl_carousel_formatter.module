<?php

/**
 * Implementation of hook_field_formatter_info().
 */
function owl_carousel_formatter_field_formatter_info() {
  return array(
    'owl_carousel' => array(
      'label' => t('OWL Carousel'),
      'field types' => array('image','media'),
      'settings' => array(),
      'description' => t('Display multi-value fields as an OWL Carousel.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function owl_carousel_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $widget_settings = $field['settings'];

  dpm( $field );
  dpm( $instance );
  dpm( $form );
  dpm( $settings );
  dpm( $widget_settings );

  // create a pulldown for choosing image_styles
  $options = array(t('No Image Styles are Currently Available'),);
  foreach (image_styles() as $id => $style) {
    $options[$id] = $id;
  }
  $style_options = array();
  $styles = module_invoke_all('galleryformatter_styles');
  foreach ($styles as $style) {
    $style_options[$style] = $style;
  }
  ksort($style_options);

  $element['style'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => array('nostyle' => t('No style')) + $style_options,
    '#default_value' => $settings['style'],
    '#description' => t('Choose the image style.'),
  );

  $element['singleitem'] = array(
    '#type' => 'checkbox',
    '#title' => t('singleItem'),
    '#default_value' => variable_get('singleitem'),
    '#description' => t('Display only one item. <a href="demos/one.html">See demo</a>'),
  );

  $element['navigation'] = array(
    '#type' => 'checkbox',
    '#title' => t('navigation'),
    '#default_value' => $settings['navigation'],
    '#description' => t('Display "next" and "prev" buttons.'),
  );

  $element['pagination'] = array(
    '#type' => 'checkbox',
    '#title' => t('pagination'),
    '#default_value' => $settings['pagination'],
    '#description' => t('Show pagination.'),
  );

  $element['scrollPerPage'] = array(
    '#type' => 'checkbox',
    '#title' => t('scrollPerPage'),
    '#default_value' => $settings['scrollPerPage'],
    '#description' => t('Scroll per page not per item.'),
  );


  $element['lazyLoad'] = array(
    '#type' => 'checkbox',
    '#title' => t('lazyLoad'),
    '#default_value' => $settings['lazyLoad'],
    '#description' => t('Delays loading of images. Images outside of viewport won\'t be loaded before user scrolls to them. Great for mobile devices to speed up page loadings. IMG need special markup class="lazyOwl" and data-src="your img path". <a href="http://owlgraphic.com/owlcarousel/demos/lazyLoad.html">See example.</a>'),
  );
  // why arent settings saving?
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function owl_carousel_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  // $display = $instance['display'][$view_mode];
  // $settings = $display['settings'];
  return 'Display images using the OWL carousel jQuery plugin.';
}

/**
 * Implementation of hook_theme().
 */
function owl_carousel_formatter_theme() {
  return array(
    'owl_carousel_formatter' => array(
      'variables' => array( 'images'=> NULL, 'settings' => NULL),
      'template' => 'theme/owl_carousel_formatter'
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function owl_carousel_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // if there are no images, dont do anything else
  if(empty($items)){
    return $element;
  }
  $modulepath = drupal_get_path('module', 'owl_carousel');
  $settings = $display['settings'];
  
//  dpm( $settings );

  $settings['style'] = strtolower($settings['style']);

  // Media field support (only images currently... change this) 
  // @todo, owl carousel can handle anything inside the divs, so we could do semantic html video output for media elements too)
  if ($field['type'] == 'media') {
    foreach ($items as $delta => $item) {
      if ($item['file']->type == 'image') {
        $items[$delta] = (array) $item; // Compatibility with 7.x-1.0-beta4 and previous media versions
        $items[$delta]['uri'] = $item['file']->uri;
        $items[$delta]['filename'] = $item['file']->filename;
      }
    }
    /**
     * If it's not an image remove it from our items... for now.
     */
    $changed = FALSE;
    foreach($items as $delta => $item) {
      if ($item['file']->type !== 'image') {
        unset($items[$delta]);
        $changed = TRUE;
      }
    }
    // if we removed from $items, reset the array keys
    if ($changed) {
      $items = array_values($items);
    }
  }

  // emove unfound files,
  // to avoid errors when the image is no longer on the server but still in the image field.
  $changed = FALSE;
  foreach ($items as $delta => $item) {
    if (!file_exists( $items[$delta]['uri'])) {
      unset($items[$delta]);
      $changed = TRUE;
    }
  };
  // if we removed from $items, reset the array keys
  if ($changed) {
    $items = array_values($items);
  }

  // if there are no images, dont do anything else
  if(empty($items)) {
    return $element;
  }

  $itemCount = count($items);

  // prepare the renderable array
  $renderitems = array();
  // get the unique entity id for later
  $ids = entity_extract_ids($entity_type, $entity);
  $entity_id =  $ids[0];

  foreach ($items as $delta => $item){
    // Grab and sanitize image information
    if (!empty($item['title'])) {
      // Sanitize the title
      if(strpos($item['title'], '<') !== FALSE) {
        $item['title'] = strip_tags($item['title']);
      }
    } else {
      $item['title'] = ''; // prevents php notices
    }
    $renderitems['images'][$delta]['title'] = $item['title'];
    // whats this do?
    $item['filename'] = $item['filename'] = '';

    // Check if alt attribute is already set and sanitize it, if not use the filename as alt attribute
    if (isset($item['alt']) && !empty($item['alt'])) {
      if(strpos($item['alt'], '<') !== FALSE) {
        $item['alt'] = strip_tags($item['alt']);
      }
    } else {
      $item['alt'] = $item['filename'];
    }
    $renderitems['images'][$delta]['alt'] = $item['alt'];

    // If the title is empty use alt or the node title in that order.
    if (empty($item['title'])) {
      if (!empty($item['alt'])) {
        $item['title'] = $item['alt'];
      } else {
        if(!empty($entity->title)){
          if(strpos($entity->title, '<') !== FALSE) {
            $item['title'] = strip_tags($entity->title);
          } else {
            $item['title'] = $entity->title;
          }
        }
      }
    }

    // prepare the unique hash id per image
    $id = $field['field_name'] . '-' . $entity_id;
    $renderitems['images'][$delta]['hash_id'] = 'item-' . $delta . '-' . $id;

    $renderitems['images'][$delta]['image'] = theme('image_formatter', array(
        'item' => $item,
      )
    );

  }

  if($itemCount > 1){
    // @todo allow min and non-min versions from settings
    drupal_add_js( libraries_get_path('owl-carousel') . '/owl.carousel.min.js');
    drupal_add_js( drupal_get_path('module', 'owl_carousel_formatter') . '/js/owl_carousel_formatter.js');
    drupal_add_js( array('owl_carousel_formatter' => $settings), 'setting');
  }
  // @todo make these both checkbox optional via admin panel
  drupal_add_css( libraries_get_path('owl-carousel') . '/owl.carousel.css');
  drupal_add_css( libraries_get_path('owl-carousel') . '/owl.theme.css');

  // prepare the variables for our theme function
  $element['#settings'] = $settings;
  $element['#images'] = $renderitems['images'];
  $element['#theme'] ='owl_carousel_formatter';

  return $element;
}

